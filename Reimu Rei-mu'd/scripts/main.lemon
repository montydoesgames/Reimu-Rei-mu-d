global u8 ReimuPalette
global u8 ReimuAltPalette
global u8 ReimuTheme
global u8 ReimuFellFromTheLight
global u8 Randomiser
global u8 ReimuNitoriCompat
global bool Bluemu

/*
    Hey! Stop peaking at the code!

    Anyways, the code for both Alternate Edition AND the base mod are included in here, for convenience's sake.
*/

constant array<string> REIMU_PALETTE =
{
    "Reimu",
    "PC98",
    "Marisa",
    "Cirno",
    "Flandre",
    "Koishi",
    "Takane",
    "BadApple",
    "ReimuRemilia",
    "Sakuya",
    "Suika",
    "Shaded",
    "Dolphin",
    "Scarly",
    "AnotherUser",
    "ParaReimu",
    "PlushReimu",
    "ScarletDevil",
    "ExtraReimu",
    "KatyReimu",
    "AespriteReimu",
    "TripReimu",
    "FreddyReimu",
    "BlueSpeed",
    "Yebby"
}

constant array<string> REIMU_ICON =
{
    "icon_Reimu",
    "icon_PC98Reimu",
    "icon_MarisaReimu",
    "icon_CirnoReimu",
    "icon_FlandreReimu",
    "icon_KoishiReimu",
    "icon_TakaneReimu",
    "icon_AppleReimu",
    "icon_RemiliaReimu",
    "icon_SakuyaReimu",
    "icon_SuikaReimu",
    "icon_ShadedReimu",
    "icon_DolphinReimu",
    "icon_ScarlyReimu",
    "icon_AnotherUserReimu",
    "icon_ParaReimu",
    "icon_PlushReimu",
    "icon_ScarletDevilReimu",
    "icon_ExtraReimu",
    "icon_KatyReimu",
    "icon_AespriteReimu",
    "icon_TripReimu",
    "icon_FreddyReimu",
    "icon_BlueSpeedReimu",
    "icon_YebbyReimu"
}

constant array<string> REIMU_SUPERTHEME =
{
    "2C",
    "2C_reimu",
    "2C_cirno",
    "2C_sakuya",
    "01_touhou",
}

function u64 getCharacterPaletteKey(u8 character)
{
    if (Randomiser == 0) && !(ReimuFellFromTheLight)
        Randomiser = System.rand() % 20

	if (character == CHARACTER_SONIC) && (u8[0xffffe654] == 0)
	{
	    if (Randomiser == 4)
	        return "ReimuFrisk"
	    else if System.loadPersistentData(0xffffffbe, "Bluemu", 0x01) && ReimuNitoriCompat && (ReimuAltPalette == 0x12)
	        return "Bluemu"
        else if (ReimuNitoriCompat) && (Mods.isModActive("Nitori Kawashiro In 3 A.I.R."))
	        return "NitoriReimu"
	    else if !(Mods.isModActive("ReimuRemadeAlternatePalettes"))
            return REIMU_PALETTE[ReimuPalette]
        else
            return REIMU_PALETTE[ReimuAltPalette]
	}
	return base.getCharacterPaletteKey(character)
}

function u64 getCharacterBluespherePaletteKey(u8 character)
{
	if (character == CHARACTER_SONIC) && (u8[0xffffe654] == 0)
	{
	    if (Randomiser == 4)
	        return "ReimuFrisk"
	    else if System.loadPersistentData(0xffffffbe, "Bluemu", 0x01) && ReimuNitoriCompat && (ReimuAltPalette == 0x12)
	        return "Bluemu"
        else if (ReimuNitoriCompat) && (Mods.isModActive("Nitori Kawashiro In 3 A.I.R."))
	        return "NitoriReimu"
	    else if !(Mods.isModActive("ReimuRemadeAlternatePalettes"))
            return REIMU_PALETTE[ReimuPalette]
        else
            return REIMU_PALETTE[ReimuAltPalette]
	}
	return base.getCharacterBluespherePaletteKey(character)
}

function u64 getCharacterEndPosePaletteKey(u8 character)
{
	if (character == CHARACTER_SONIC) && (u8[0xffffe654] == 0)
	{
	    if (Randomiser == 4)
	        return "StoryofEndertale"
	    else if System.loadPersistentData(0xffffffbe, "Bluemu", 0x01) && ReimuNitoriCompat && (ReimuPalette == 0x12)
	        return "BluemuEnd"
        else if (ReimuNitoriCompat) && (Mods.isModActive("Nitori Kawashiro In 3 A.I.R."))
	        return "NitoriReimuEnd"
	    else if !(Mods.isModActive("ReimuRemadeAlternatePalettes"))
            return stringformat("%sEnd", REIMU_PALETTE[ReimuPalette])
        else
            return stringformat("%sEnd", REIMU_PALETTE[ReimuAltPalette])
	}
    return base.getCharacterEndPosePaletteKey(character)
}

function void Standalone.playAudio(u8 sfxId)
{
if (sfxId <= 32) || (sfxId == 0xf0) || (sfxId == 0x2f)
{
    if (Audio.isPlayingAudio("01_touhou") && (ReimuPalette == 7)) || (Audio.isPlayingAudio("69_undereimu"))
        return
    else if (Randomiser == 4) && (u8[0xffffe654] == 0) && (isMainCharacter(CHARACTER_SONIC))
    {
            Audio.playAudio("69_undereimu", AudioContext.CONTEXT_MUSIC)
         return
    }
    else if (ReimuPalette == 7) && (isMainCharacter(CHARACTER_SONIC)) && (u8[0xffffe654] == 0)
    {
        Audio.playAudio("01_touhou", AudioContext.CONTEXT_MUSIC)
        return
    }
    else if (sfxId == 0xf0) && (isMainCharacter(CHARACTER_SONIC)) && (u8[0xffffe654] == 0) && !((ReimuPalette == 7) || (ReimuTheme == 5))
    {
        if (ReimuPalette == 3) && (ReimuTheme == 0)
            Audio.playAudio("2C_cirno", AudioContext.CONTEXT_MUSIC)
        else if (ReimuPalette == 9) && (ReimuTheme == 0)
            Audio.playAudio("2C_sakuya", AudioContext.CONTEXT_MUSIC)
        else if (ReimuTheme == 0)
            Audio.playAudio("2C_reimu", AudioContext.CONTEXT_MUSIC)
        else if (ReimuTheme > 0)
            Audio.playAudio(REIMU_SUPERTHEME[ReimuTheme], AudioContext.CONTEXT_MUSIC)
        return
    }
}
if !((sfxId == MUSIC_CTRL_FADEOUT) || (sfxId == MUSIC_CTRL_STOP) && ((ReimuPalette == 7) || (Randomiser == 4)))
    base.Standalone.playAudio(sfxId)
}

function u64 Standalone.getModdedSoundKey(u64 soundKey, u8 sfxId, u8 soundRegType)
{
    if (Audio.isPlayingAudio("01_touhou") && (ReimuPalette == 7)) || (Audio.isPlayingAudio("69_undereimu"))
        return 0
    else
        return base.Standalone.getModdedSoundKey(soundKey, sfxId, soundRegType)
}

// Rewrite character sprite stuff, only for Sonic though.

function bool Standalone.drawCharacterSprite(u8 character, u8 variant, s16 px, s16 py, bool asSmallGhost)
{
    //ES and Non-Sonic checks
    if !(character == CHARACTER_SONIC && u8[0xffffe654] == 0)
        return base.Standalone.drawCharacterSprite(character, variant, px, py, asSmallGhost)

	bool isPlayer1 = (variant == 0)
	u32 characterAddress = isPlayer1 ? 0xffffb000 : 0xffffb04a

	// Check only needed for Tails' tails
	if (variant == 2)
	{
		// No smooth rotation in Slot Machine
		if (global.zone == 0x15)
			return false

		characterAddress = 0xffff0000 + u16[A0 + 0x30]

		// Do not render when blinking after hit
		if (u8[characterAddress + 0x34] != 0 && ((u8[characterAddress + 0x34] + 1) & 0x04) == 0)
		{
			// Prevent emulator-like rendering
			return true
		}

		// Do not render when Tails looks into the background (e.g. LBZ 2 end cutscene) and in DEZ gravity transporters
		if (u8[characterAddress + 0x22] >= 0x55 && u8[characterAddress + 0x22] <= 0x5b)
		{
			// Prevent emulator-like rendering
			return true
		}

		isPlayer1 = (characterAddress == 0xffffb000)
		character = CHARACTER_TAILS
	}

	if (level.vertical_wrap == 0xff00)
	{
		// For vertically wrapping levels, "normalize" py into interval [-move_area.bottom.target * 3/4, -move_area.bottom.target * 1/4]
		py &= level.height.bitmask
		if (py > move_area.bottom.target * 3/4 && move_area.bottom.target >= 0xe0)	// move_area.bottom.target is very low in DEZ boss act
			py -= move_area.bottom.target
	}

	u8 animationSprite = char.animation.sprite
	u16 animationSpriteEx = Standalone.getModdedAnimationSpriteEx(character, animationSprite)
	u8 flags = (char.render_flags & (SPRITE_FLAG_FLIP_X | SPRITE_FLAG_FLIP_Y))
	u8 angle = 0
	u64 key = Standalone.getModdedAnimationSpriteKey(character, animationSpriteEx)		// First ask modded scripts
	u8 rotationMode = 0

	if (variant < 2)
	{
		if (character == CHARACTER_SONIC && animationSpriteEx == animationSprite)	// Last check is only false if modded scripts made their own changes
		{
			// Special handling for Drop Dash & Super Peel-Out
			if (char.state == char.state.SONIC_DROPDASH)
			{
				char.animation.sprite = 0x96
				char.animation.frame = 0
				char.animation.timer = 1
			}
			else if (animationSprite >= 0x21 && animationSprite <= 0x30)
			{
				if (sonic.fastrunanim.timer > 0)
				{
					animationSpriteEx = CHAR_ANIMSPRITE_SONIC_PEELOUT + (level.framecounter & 0x03)
				}
			}
		}

		{
			// Character
			if (animationSprite >= 0x01 && animationSprite <= 0x20)
			{
				if !(Game.getSetting(SETTING_SMOOTH_ROTATION))
				{
					angle = (animationSprite - 0x01) / 8 * 0xe0
					if ((char.flags & char.flag.FACING_LEFT) == (global.inv_gravity == 0))
						angle = -angle
					animationSprite = 0x01 + (animationSprite - 0x01) % 8
				}
				else
				{
    				// Walking animation
    				animationSprite = 0x01 + (animationSprite - 0x01) % 8
    				rotationMode = 1
				}
			}
			else if (animationSprite >= 0x21 && animationSprite <= 0x30)
			{
				if !(Game.getSetting(SETTING_SMOOTH_ROTATION))
				{
					angle = (animationSprite - 0x21) / 4 * 0xe0
					if ((char.flags & char.flag.FACING_LEFT) == (global.inv_gravity == 0))
						angle = -angle
					animationSprite = 0x21 + (animationSprite - 0x21) % 4
				}
				else
				{
				// Running animation
				animationSprite = 0x21 + (animationSprite - 0x21) % 4
				rotationMode = 1
				}
			}
			else if (animationSprite >= 0x78 && animationSprite <= 0x7f)
			{
				if !(Game.getSetting(SETTING_SMOOTH_ROTATION))
				{
					angle = (animationSprite - 0x78) / 1 * 0xe0
					if ((char.flags & char.flag.FACING_LEFT) == (global.inv_gravity == 0))
						angle = -angle
					animationSprite = 0x78 + (animationSprite - 0x78) % 1
				}
				else
				{
				// Swinging animation
				animationSprite = 0x78
				rotationMode = 2
				}
			}
			else if (character == CHARACTER_TAILS && animationSprite >= 0xc3 && animationSprite <= 0xca)
			{
				// Tails' fastest run animation
				animationSprite = 0xc3 + (animationSprite - 0xc3) % 2
				rotationMode = 1
			}
			else if (character == CHARACTER_KNUCKLES && animationSprite == 0xc0)
			{
				// Only for DDZ
				rotationMode = 1
			}

			if (rotationMode != 0)
			{
				s8 oldRotation = isPlayer1 ? oldRotationPlayer1 : oldRotationPlayer2
				flags = char.flags & char.flag.FACING_LEFT		// This really has to be "char.flags", not "char.render_flags"

				angle = char.rotation
				if (rotationMode == 1)
				{
					if (abs(s8(char.rotation)) <= 0x10 && abs(s8(oldRotation)) <= 0x10)
					{
						angle = 0
					}

					if (angle != char.rotation)
					{
						s8 diff = angle - oldRotation
						angle = oldRotation + clamp(diff, -3, 3)
					}
				}
			}

			if (isPlayer1)
				oldRotationPlayer1 = angle
			else
				oldRotationPlayer2 = angle
		}

		if (key == 0 && animationSpriteEx >= 0x100)
		{
			// Special handling for Drop Dash & Super Peel-Out
			if (animationSpriteEx >= CHAR_ANIMSPRITE_SONIC_PEELOUT)
			{
				key = stringformat("reimu_peelout_%d", animationSpriteEx - CHAR_ANIMSPRITE_SONIC_PEELOUT)
			}
			else
			{
				key = stringformat("reimu_dropdash_%d", animationSpriteEx - CHAR_ANIMSPRITE_SONIC_DROPDASH)
			}
		}
		if (isPlayer1)
			timeattack.animSpriteEx = animationSpriteEx

		if (key == 0)
		{
			key = stringformat(stringformat("%s_0x%02x", getCharacterSpriteKey(character)), animationSprite)

			if (!Renderer.hasCustomSprite(key))
			{
				u32 sourceBase    = (character == CHARACTER_SONIC) ? ((animationSprite >= 0xda) ? 0x140060 : 0x100000) : (character == CHARACTER_TAILS) ? ((animationSprite >= 0xd1) ? 0x143d00 : 0x3200e0) : 0x1200e0
				u32 tableAddress  = (character == CHARACTER_SONIC) ? 0x148182 : (character == CHARACTER_TAILS) ? 0x14a08a : 0x14bd0a
				u32 mappingOffset = (character == CHARACTER_SONIC) ? 0x146620 : (character == CHARACTER_TAILS) ? 0x148eb8 : 0x14a8d6		// Not really necessary here, we could also use "char.mapping_offset"

				key = Renderer.setupCustomCharacterSprite(sourceBase, tableAddress, mappingOffset, animationSprite, 0x00)
			}
		}
	}
	else
	{
		if (Game.getSetting(SETTING_SMOOTH_ROTATION))
		{
			// Tails' tails
			if (animationSprite >= 0x05 && animationSprite <= 0x14)
			{
				animationSprite = 0x05 + (animationSprite - 0x05) % 4
				angle = lookupAngleByVector(s16[characterAddress + 0x18], s16[characterAddress + 0x1a])

				flags = 0
				if (char.flags & char.flag.FACING_LEFT)
				{
					flags |= SPRITE_FLAG_FLIP_X
					angle += 0x80
				}
				if (global.inv_gravity)
				{
					flags ^= SPRITE_FLAG_FLIP_Y
					angle = -angle
				}
			}
		}

		key = stringformat(stringformat("%s_tails_0x%02x", getCharacterSpriteKey(CHARACTER_TAILS)), animationSprite)
		if (!Renderer.hasCustomSprite(key))
		{
			key = Renderer.setupCustomCharacterSprite(0x336620, 0x344d74, 0x344bb8, animationSprite, 0x00)
		}
	}

	u16 renderQueue = 0xa000 - char.sprite_priority
	u8 atex = (char.sprite_attributes >> 9) & 0x30
	if (EXTENDED_CHARACTER_PALETTES)
		atex = 0x40 + character * 0x20

	if (char.sprite_attributes & sprite_attribute.PRIORITY)
		flags |= SPRITE_FLAG_PRIO

	if (rotationMode != 0 && global.inv_gravity)
	{
		// Correction for inverse gravity
		angle = 128 - angle
		flags ^= SPRITE_FLAG_FLIP_X
	}

	if (ROMDataAnalyser.isEnabled())
	{
		string category = (variant < 2) ? getCharacterSpriteKey(character) : stringformat("%s_tails", getCharacterSpriteKey(CHARACTER_TAILS))
		Renderer.extractCustomSprite(key, category, animationSprite, atex)
	}

	// Render character
	if (asSmallGhost)
	{
		Renderer.drawCustomSprite(key, px, py, atex, flags | SPRITE_FLAG_PRIO, 0xa800, angle, 0xc0ffffff, 0x8000)
	}
	else
	{
		Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue, angle, 255)
	}

	bool useAfterImages
	if (isPlayer1)
	{
		if ((super.active == 0xff) || (super.active.tails == 0xff))
		{
			useAfterImages = true
		}
		else
		{
			if (Game.getSetting(SETTING_SPEEDUP_AFTERIMGS))
			{
				useAfterImages = ((u8[characterAddress + 0x2b] & char.bonus.SPEED_UP) != 0)
			}
		}
	}

	if (useAfterImages)
	{
		// Additional offset for Sonic charging a Super Peel-Out (either Hyper Sonic or with Speed Shoes)
		s16 afterImagesOffsetX = 0
		if (char.character == CHARACTER_SONIC && char.spindash == 0x80)
		{
			afterImagesOffsetX = (char.groundspeed >> 7) * ((char.flags & char.flag.FACING_LEFT) ? 1 : -1)
		}

		for (s8 i = 3; i > 0; --i)
		{
			A1 = 0xffffe500 + u8(posbackup.offset.player1 - (i * 8 + 4))
			s16 px0 = u16[A1] - camera.foreground.x.u16 + (i * afterImagesOffsetX / 4)
			s16 py0 = u16[A1+2] - camera.foreground.y.u16
			if (level.vertical_wrap == 0xff00)	// Consider vertical level wrap
				py0 &= level.height.bitmask

			Renderer.setSpriteTagWithPosition(characterAddress + 0x10 + i, px0, py0)
			Renderer.drawCustomSprite(key, px0, py0, atex, flags, renderQueue - i, angle, 192 - i * 32)
		}
	}
	// Prevent emulator-like rendering
	return true
}

//# address-hook(0x012600) end(0x01286c)
//# translated(0x012a2a) end(0x012a6e)
function void UpdateSonicAnimation()
{
    if !(u8[0xffffe654] == 0)
    {
        base.UpdateSonicAnimation()
        return
    }

	if (char.state != char.state.former)
	{
		char.state.former = char.state
		char.animation.frame = 0
		char.animation.timer = 0
		char.flags &= ~char.flag.PUSHING
	}
        if (char.state == 0x36 || char.state == 0x31) //Spring Twirl and Falling
		{
			base.UpdateSonicAnimation()
			return
		}

	A1 = 0x012aa6
	A1 = tableLookupAddress(A1, char.state * 2)
	D0.u8 = u8[A1]

	// D0.u8 is either:
	//  - 0xff when running
	//  - 0xfe when rolling (on ground or in air)
	//  - between 0x00 and 0x7f in other cases (like standing, balancing, spring-jumping, getting hurt, etc.)
	if (char.state == char.state.HANGING || char.state == char.state.SONIC_HANGON)
	{
	    fn03efba()
	}
	else if (D0.u8 < 0x80)
	{
		updateSonicAnimationStanding()
	}
	else if (D0.u8 == 0xff)
	{
		updateSonicAnimationRunning()
	}
	else // if (D0.u8 == 0xfe)
	{
		updateSonicAnimationRolling()
	}
}

function string getCharacterSpriteKey(u8 character, bool isSuperActive)
{
    if !(character == CHARACTER_SONIC) || !(u8[0xffffe654] == 0)
        return base.getCharacterSpriteKey(character, isSuperActive)
    else
    	return "character_reimu"
}

//# address-hook(0x00db44) end(0x00dbb2)
function void RenderHUD()
{
	s16 baseX = global.level_started
	if (baseX < 0)
	{
		baseX += 8
		global.level_started = baseX
	}
	baseX += 0x0f
	s16 baseY = 0x08
	u16 renderQueue = 0xf000
		if (!Game.isTimeAttack() && !Game.getSetting(SETTING_INFINITE_LIVES)) && (isMainCharacter(CHARACTER_SONIC)) && (u8[0xffffe654] == 0)
		{
			bool useMobilePosition = HUD.useMobileLivesDisplay()
			u16 px = useMobilePosition ? (getScreenWidth() - baseX - 0x30) : baseX
			u16 py = useMobilePosition ? baseY : 200
			if (Randomiser == 4)
			{
			    HUD.drawSprite("icon_ReimuFrisk", px + 0x07, py + 0x08, renderQueue)
			    ++renderQueue
			}
	        else if System.loadPersistentData(0xffffffbe, "Bluemu", 0x01) && ReimuNitoriCompat && (ReimuPalette == 0x12)
	        {
			    HUD.drawSprite("icon_Bluemu", px + 0x07, py + 0x08, renderQueue)
			    ++renderQueue
			}
			    else if (ReimuNitoriCompat) && (Mods.isModActive("Nitori Kawashiro In 3 A.I.R."))
			{
			    HUD.drawSprite("icon_ReimuNitori", px + 0x07, py + 0x08, renderQueue)
			    ++renderQueue
			}
			else if !(Mods.isModActive("ReimuRemadeAlternatePalettes"))
			{
			    HUD.drawSprite(REIMU_ICON[ReimuPalette], px + 0x07, py + 0x08, renderQueue)
			    ++renderQueue
			}
			else
			{
			    HUD.drawSprite(REIMU_ICON[ReimuAltPalette], px + 0x07, py + 0x08, renderQueue)
			    ++renderQueue
			}
			HUD.drawSprite("LifeText_Reimu", px + 0x0f, py, renderQueue)
			++renderQueue

			if (lives_counter >= 10)
				HUD.drawSmallDigit(u16((lives_counter / 10) % 10), px + 0x20, py + 8, renderQueue)
			HUD.drawSmallDigit(u16(lives_counter % 10), px + 0x28, py + 8, renderQueue)
		}
base.RenderHUD()
}

function u64 Monitor.getIconSpriteKey(u8 type)
{
	if (type == 0x01) && (isMainCharacter(CHARACTER_SONIC)) && (u8[0xffffe654] == 0)
	{
		if (ReimuNitoriCompat) && (Mods.isModActive("Nitori Kawashiro In 3 A.I.R."))
            return "icon_ReimuNitori"
        else if (Randomiser == 4)
            return "icon_ReimuFrisk"
        else
	    	return REIMU_ICON[ReimuPalette]
	}
return base.Monitor.getIconSpriteKey(type)
}

// Signpost and Result Nameplate renderhooking
function bool Standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
{
	bool prioFlag = (objA0.sprite_attributes & 0x8000) != 0

	if (objA0.update_address == 0x02dd98) || (objA0.update_address == 0x02ea50 || objA0.update_address == 0x02ec1e)
	{
		if (objA0.animation.sprite == 0x13) && (u8[0xffffe654] == 0)
		{
			Renderer.drawCustomSprite("ActClear_Reimu", px + 30, py + 0x8, 0x40, SPRITE_FLAG_PRIO, renderQueue)
			return true
		}
	}
	if (objA0.update_address == 0x0837b2)
	{
		if (objA0.animation.sprite == 0) && (u8[0xffffe654] == 0)
		{
			Renderer.drawCustomSprite("Signpost_Reimu", px, py, 0x40, prioFlag ? SPRITE_FLAG_PRIO : 0, renderQueue+1)
			return true
		}
	}
return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
}

function string ExtraChar.Menu.actselect.items.menuitems.getNames(u8 character)
{
	if (character == 0x00)
		return !(Randomiser == 4) ? "Reimu & Tails" : "Whoa-oh-oh-oh-oh-oh-oh-oh-oh-oh\n\nTails in Undertale"
	else if (character == 0x01)
		return !(Randomiser == 4) ? "Reimu" : "Whoa-oh-oh-oh-oh-oh-oh-oh-oh-oh\n\nStory of Undertale"
    else
        return base.ExtraChar.Menu.actselect.items.menuitems.getNames(character)
}

//# address-hook(0x010a94) end(0x010ae8)
function void Character.BaseUpdate.Sonic()
{
if (global.zone == 0x05) && (char.flags & char.flag.UNDERWATER) && (char.state == char.state.DIED) && (u8[0xffffe654] == 0) && !System.loadPersistentData(0xffffffbe, "Bluemu", 0x01)
{
    Bluemu = true
    System.savePersistentData(0xffffffbe, "Bluemu", 0x01)
    playSound(SFX_RING)
}
base.Character.BaseUpdate.Sonic()
}

//Achievement stuff

#if ACHIEVEMENTS_PLUS_ACTIVE

define u16 REIMU_ACHIEVEMENT_BADAPPLE	= 254
define u16 REIMU_ACHIEVEMENT_BLUEMU	= 255

function string AchievementsPlus.AchivementsManager.getAchievementDetail(u16 achievementID, u8 parse)
{
	// Parse:
	// - 0x00 - Achievement title
	// - 0x01 - Achievement stars
	// - 0x02 - Achievement sub-title
	// - 0x03 - Achievement description
	// - 0x04 - Achievement icon

	if (achievementID == REIMU_ACHIEVEMENT_BADAPPLE)
	{
		// Define the value of the Achievement 
		u32 tempValue1 = u32[0x851304 + (achievementID * 0x04)]
		// Define if the achievement is complete

		if (parse == 0x00)
			return "This seems awfully familiar..."
		else if (parse == 0x01)
			return "100000"
		else if (parse == 0x02)
			return "If it exists..."
		else if (parse == 0x03)
			return "Use the Bad Apple palette."
		else if (parse == 0x04)
			return "menu_characters_sonic"
	}
	else if (achievementID == REIMU_ACHIEVEMENT_BLUEMU)
	{
		// Define the value of the Achievement 
		u32 tempValue1 = u32[0x851304 + (achievementID * 0x04)]
		// Define if the achievement is complete
		bool tempValue2 = tempValue1 == (tempValue1 | 0xa00000)
		
		if (parse == 0x00)
			return tempValue2 ? "True and blue" : "@Secret" // "@Hidden" or "@Secret" will not appear in the menu, but can still be completed
		else if (parse == 0x01)
			return "111000"
		else if (parse == 0x02)
			return "I'm blue da ba dee"
		else if (parse == 0x03)
			return "Die in Ice Cap Zone 2's water. To activate the newly unlocked skin, turn Touhou Lock-On to ''On'' and set the palette to ''Another Life''."
		else if (parse == 0x04)
			return "menu_characters_sonic"
	}
    // Return the base function
	return base.AchievementsPlus.AchivementsManager.getAchievementDetail(achievementID, parse)
}

//# address-hook(0x010afa) end(0x010bb8)
function void Character.Initialization.Sonic()
{
    if System.loadPersistentData(0xffffffbe, "Bluemu", 0x01)
    	AchievementsPlus.AchivementsManager.setAchievementComplete(REIMU_ACHIEVEMENT_BLUEMU)
base.Character.Initialization.Sonic()
}

#endif

function string getFallSpriteKey(u8 character)
{
	if (character == CHARACTER_SONIC) && (u8[0xffffe654] == 0)
	{
	    return "reimu_fall"
	}
return base.getFallSpriteKey(character)
}